commit ab49a74f039d0c19f451642effb9c3a257f5cf4e
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:13:55 2022 +0900

    base16-colors

diff --git a/config.def.h b/config.def.h
index 91ab8ca..2d60217 100644
--- a/config.def.h
+++ b/config.def.h
@@ -95,33 +95,27 @@ unsigned int tabspaces = 8;

 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
-	/* 8 normal colors */
-	"black",
-	"red3",
-	"green3",
-	"yellow3",
-	"blue2",
-	"magenta3",
-	"cyan3",
-	"gray90",
-
-	/* 8 bright colors */
-	"gray50",
-	"red",
-	"green",
-	"yellow",
-	"#5c5cff",
-	"magenta",
-	"cyan",
-	"white",
-
-	[255] = 0,
-
-	/* more colors can be added after 255 to use with DefaultXX */
-	"#cccccc",
-	"#555555",
-	"gray90", /* default foreground colour */
-	"black", /* default background colour */
+    /* 8 normal colors */
+    [0] = "#2b303b", /* black   */
+    [1] = "#bf616a", /* red     */
+    [2] = "#a3be8c", /* green   */
+    [3] = "#ebcb8b", /* yellow  */
+    [4] = "#8fa1b3", /* blue    */
+    [5] = "#b48ead", /* magenta */
+    [6] = "#96b5b4", /* cyan    */
+    [7] = "#c0c5ce", /* white   */
+
+    /* 8 bright colors */
+    [8] = "#65737e",  /* black   */
+    [9] = "#bf616a",  /* red     */
+    [10] = "#a3be8c", /* green   */
+    [11] = "#ebcb8b", /* yellow  */
+    [12] = "#8fa1b3", /* blue    */
+    [13] = "#b48ead", /* magenta */
+    [14] = "#96b5b4", /* cyan    */
+    [15] = "#eff1f5", /* white   */
+
+    [255] = 0,
 };


@@ -129,10 +123,10 @@ static const char *colorname[] = {
  * Default colors (colorname index)
  * foreground, background, cursor, reverse cursor
  */
-unsigned int defaultfg = 258;
-unsigned int defaultbg = 259;
-unsigned int defaultcs = 256;
-static unsigned int defaultrcs = 257;
+unsigned int defaultfg = 7;
+unsigned int defaultbg = 0;
+unsigned int defaultcs = 15;
+static unsigned int defaultrcs = 0;

 /*
  * Default shape of cursor

commit 189deef017328e3bc9f055bdc4de1c6eabf8ca1e
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:14:19 2022 +0900

    formatting

diff --git a/config.def.h b/config.def.h
index 2d60217..95a28ce 100644
--- a/config.def.h
+++ b/config.def.h
@@ -118,7 +118,6 @@ static const char *colorname[] = {
     [255] = 0,
 };

-
 /*
  * Default colors (colorname index)
  * foreground, background, cursor, reverse cursor
@@ -169,32 +168,32 @@ static uint forcemousemod = ShiftMask;
  * Beware that overloading Button1 will disable the selection.
  */
 static MouseShortcut mshortcuts[] = {
-	/* mask                 button   function        argument       release */
-	{ XK_ANY_MOD,           Button2, selpaste,       {.i = 0},      1 },
-	{ ShiftMask,            Button4, ttysend,        {.s = "\033[5;2~"} },
-	{ XK_ANY_MOD,           Button4, ttysend,        {.s = "\031"} },
-	{ ShiftMask,            Button5, ttysend,        {.s = "\033[6;2~"} },
-	{ XK_ANY_MOD,           Button5, ttysend,        {.s = "\005"} },
+    /* mask                 button   function        argument       release */
+    {XK_ANY_MOD, Button2, selpaste, {.i = 0}, 1},
+    {ShiftMask, Button4, ttysend, {.s = "\033[5;2~"}},
+    {XK_ANY_MOD, Button4, ttysend, {.s = "\031"}},
+    {ShiftMask, Button5, ttysend, {.s = "\033[6;2~"}},
+    {XK_ANY_MOD, Button5, ttysend, {.s = "\005"}},
 };

 /* Internal keyboard shortcuts. */
 #define MODKEY Mod1Mask
-#define TERMMOD (ControlMask|ShiftMask)
+#define TERMMOD (ControlMask | ShiftMask)

 static Shortcut shortcuts[] = {
-	/* mask                 keysym          function        argument */
-	{ XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
-	{ ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
-	{ ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
-	{ XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
-	{ TERMMOD,              XK_Prior,       zoom,           {.f = +1} },
-	{ TERMMOD,              XK_Next,        zoom,           {.f = -1} },
-	{ TERMMOD,              XK_Home,        zoomreset,      {.f =  0} },
-	{ TERMMOD,              XK_C,           clipcopy,       {.i =  0} },
-	{ TERMMOD,              XK_V,           clippaste,      {.i =  0} },
-	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
-	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
-	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+    /* mask                 keysym          function        argument */
+    {XK_ANY_MOD, XK_Break, sendbreak, {.i = 0}},
+    {ControlMask, XK_Print, toggleprinter, {.i = 0}},
+    {ShiftMask, XK_Print, printscreen, {.i = 0}},
+    {XK_ANY_MOD, XK_Print, printsel, {.i = 0}},
+    {TERMMOD, XK_Prior, zoom, {.f = +1}},
+    {TERMMOD, XK_Next, zoom, {.f = -1}},
+    {TERMMOD, XK_Home, zoomreset, {.f = 0}},
+    {TERMMOD, XK_C, clipcopy, {.i = 0}},
+    {TERMMOD, XK_V, clippaste, {.i = 0}},
+    {TERMMOD, XK_Y, selpaste, {.i = 0}},
+    {ShiftMask, XK_Insert, selpaste, {.i = 0}},
+    {TERMMOD, XK_Num_Lock, numlock, {.i = 0}},
 };

 /*
@@ -222,229 +221,229 @@ static Shortcut shortcuts[] = {
  * If you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
  * to be mapped below, add them to this array.
  */
-static KeySym mappedkeys[] = { -1 };
+static KeySym mappedkeys[] = {-1};

 /*
  * State bits to ignore when matching key or button events.  By default,
  * numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored.
  */
-static uint ignoremod = Mod2Mask|XK_SWITCH_MOD;
+static uint ignoremod = Mod2Mask | XK_SWITCH_MOD;

 /*
  * This is the huge key array which defines all compatibility to the Linux
  * world. Please decide about changes wisely.
  */
 static Key key[] = {
-	/* keysym           mask            string      appkey appcursor */
-	{ XK_KP_Home,       ShiftMask,      "\033[2J",       0,   -1},
-	{ XK_KP_Home,       ShiftMask,      "\033[1;2H",     0,   +1},
-	{ XK_KP_Home,       XK_ANY_MOD,     "\033[H",        0,   -1},
-	{ XK_KP_Home,       XK_ANY_MOD,     "\033[1~",       0,   +1},
-	{ XK_KP_Up,         XK_ANY_MOD,     "\033Ox",       +1,    0},
-	{ XK_KP_Up,         XK_ANY_MOD,     "\033[A",        0,   -1},
-	{ XK_KP_Up,         XK_ANY_MOD,     "\033OA",        0,   +1},
-	{ XK_KP_Down,       XK_ANY_MOD,     "\033Or",       +1,    0},
-	{ XK_KP_Down,       XK_ANY_MOD,     "\033[B",        0,   -1},
-	{ XK_KP_Down,       XK_ANY_MOD,     "\033OB",        0,   +1},
-	{ XK_KP_Left,       XK_ANY_MOD,     "\033Ot",       +1,    0},
-	{ XK_KP_Left,       XK_ANY_MOD,     "\033[D",        0,   -1},
-	{ XK_KP_Left,       XK_ANY_MOD,     "\033OD",        0,   +1},
-	{ XK_KP_Right,      XK_ANY_MOD,     "\033Ov",       +1,    0},
-	{ XK_KP_Right,      XK_ANY_MOD,     "\033[C",        0,   -1},
-	{ XK_KP_Right,      XK_ANY_MOD,     "\033OC",        0,   +1},
-	{ XK_KP_Prior,      ShiftMask,      "\033[5;2~",     0,    0},
-	{ XK_KP_Prior,      XK_ANY_MOD,     "\033[5~",       0,    0},
-	{ XK_KP_Begin,      XK_ANY_MOD,     "\033[E",        0,    0},
-	{ XK_KP_End,        ControlMask,    "\033[J",       -1,    0},
-	{ XK_KP_End,        ControlMask,    "\033[1;5F",    +1,    0},
-	{ XK_KP_End,        ShiftMask,      "\033[K",       -1,    0},
-	{ XK_KP_End,        ShiftMask,      "\033[1;2F",    +1,    0},
-	{ XK_KP_End,        XK_ANY_MOD,     "\033[4~",       0,    0},
-	{ XK_KP_Next,       ShiftMask,      "\033[6;2~",     0,    0},
-	{ XK_KP_Next,       XK_ANY_MOD,     "\033[6~",       0,    0},
-	{ XK_KP_Insert,     ShiftMask,      "\033[2;2~",    +1,    0},
-	{ XK_KP_Insert,     ShiftMask,      "\033[4l",      -1,    0},
-	{ XK_KP_Insert,     ControlMask,    "\033[L",       -1,    0},
-	{ XK_KP_Insert,     ControlMask,    "\033[2;5~",    +1,    0},
-	{ XK_KP_Insert,     XK_ANY_MOD,     "\033[4h",      -1,    0},
-	{ XK_KP_Insert,     XK_ANY_MOD,     "\033[2~",      +1,    0},
-	{ XK_KP_Delete,     ControlMask,    "\033[M",       -1,    0},
-	{ XK_KP_Delete,     ControlMask,    "\033[3;5~",    +1,    0},
-	{ XK_KP_Delete,     ShiftMask,      "\033[2K",      -1,    0},
-	{ XK_KP_Delete,     ShiftMask,      "\033[3;2~",    +1,    0},
-	{ XK_KP_Delete,     XK_ANY_MOD,     "\033[P",       -1,    0},
-	{ XK_KP_Delete,     XK_ANY_MOD,     "\033[3~",      +1,    0},
-	{ XK_KP_Multiply,   XK_ANY_MOD,     "\033Oj",       +2,    0},
-	{ XK_KP_Add,        XK_ANY_MOD,     "\033Ok",       +2,    0},
-	{ XK_KP_Enter,      XK_ANY_MOD,     "\033OM",       +2,    0},
-	{ XK_KP_Enter,      XK_ANY_MOD,     "\r",           -1,    0},
-	{ XK_KP_Subtract,   XK_ANY_MOD,     "\033Om",       +2,    0},
-	{ XK_KP_Decimal,    XK_ANY_MOD,     "\033On",       +2,    0},
-	{ XK_KP_Divide,     XK_ANY_MOD,     "\033Oo",       +2,    0},
-	{ XK_KP_0,          XK_ANY_MOD,     "\033Op",       +2,    0},
-	{ XK_KP_1,          XK_ANY_MOD,     "\033Oq",       +2,    0},
-	{ XK_KP_2,          XK_ANY_MOD,     "\033Or",       +2,    0},
-	{ XK_KP_3,          XK_ANY_MOD,     "\033Os",       +2,    0},
-	{ XK_KP_4,          XK_ANY_MOD,     "\033Ot",       +2,    0},
-	{ XK_KP_5,          XK_ANY_MOD,     "\033Ou",       +2,    0},
-	{ XK_KP_6,          XK_ANY_MOD,     "\033Ov",       +2,    0},
-	{ XK_KP_7,          XK_ANY_MOD,     "\033Ow",       +2,    0},
-	{ XK_KP_8,          XK_ANY_MOD,     "\033Ox",       +2,    0},
-	{ XK_KP_9,          XK_ANY_MOD,     "\033Oy",       +2,    0},
-	{ XK_Up,            ShiftMask,      "\033[1;2A",     0,    0},
-	{ XK_Up,            Mod1Mask,       "\033[1;3A",     0,    0},
-	{ XK_Up,         ShiftMask|Mod1Mask,"\033[1;4A",     0,    0},
-	{ XK_Up,            ControlMask,    "\033[1;5A",     0,    0},
-	{ XK_Up,      ShiftMask|ControlMask,"\033[1;6A",     0,    0},
-	{ XK_Up,       ControlMask|Mod1Mask,"\033[1;7A",     0,    0},
-	{ XK_Up,ShiftMask|ControlMask|Mod1Mask,"\033[1;8A",  0,    0},
-	{ XK_Up,            XK_ANY_MOD,     "\033[A",        0,   -1},
-	{ XK_Up,            XK_ANY_MOD,     "\033OA",        0,   +1},
-	{ XK_Down,          ShiftMask,      "\033[1;2B",     0,    0},
-	{ XK_Down,          Mod1Mask,       "\033[1;3B",     0,    0},
-	{ XK_Down,       ShiftMask|Mod1Mask,"\033[1;4B",     0,    0},
-	{ XK_Down,          ControlMask,    "\033[1;5B",     0,    0},
-	{ XK_Down,    ShiftMask|ControlMask,"\033[1;6B",     0,    0},
-	{ XK_Down,     ControlMask|Mod1Mask,"\033[1;7B",     0,    0},
-	{ XK_Down,ShiftMask|ControlMask|Mod1Mask,"\033[1;8B",0,    0},
-	{ XK_Down,          XK_ANY_MOD,     "\033[B",        0,   -1},
-	{ XK_Down,          XK_ANY_MOD,     "\033OB",        0,   +1},
-	{ XK_Left,          ShiftMask,      "\033[1;2D",     0,    0},
-	{ XK_Left,          Mod1Mask,       "\033[1;3D",     0,    0},
-	{ XK_Left,       ShiftMask|Mod1Mask,"\033[1;4D",     0,    0},
-	{ XK_Left,          ControlMask,    "\033[1;5D",     0,    0},
-	{ XK_Left,    ShiftMask|ControlMask,"\033[1;6D",     0,    0},
-	{ XK_Left,     ControlMask|Mod1Mask,"\033[1;7D",     0,    0},
-	{ XK_Left,ShiftMask|ControlMask|Mod1Mask,"\033[1;8D",0,    0},
-	{ XK_Left,          XK_ANY_MOD,     "\033[D",        0,   -1},
-	{ XK_Left,          XK_ANY_MOD,     "\033OD",        0,   +1},
-	{ XK_Right,         ShiftMask,      "\033[1;2C",     0,    0},
-	{ XK_Right,         Mod1Mask,       "\033[1;3C",     0,    0},
-	{ XK_Right,      ShiftMask|Mod1Mask,"\033[1;4C",     0,    0},
-	{ XK_Right,         ControlMask,    "\033[1;5C",     0,    0},
-	{ XK_Right,   ShiftMask|ControlMask,"\033[1;6C",     0,    0},
-	{ XK_Right,    ControlMask|Mod1Mask,"\033[1;7C",     0,    0},
-	{ XK_Right,ShiftMask|ControlMask|Mod1Mask,"\033[1;8C",0,   0},
-	{ XK_Right,         XK_ANY_MOD,     "\033[C",        0,   -1},
-	{ XK_Right,         XK_ANY_MOD,     "\033OC",        0,   +1},
-	{ XK_ISO_Left_Tab,  ShiftMask,      "\033[Z",        0,    0},
-	{ XK_Return,        Mod1Mask,       "\033\r",        0,    0},
-	{ XK_Return,        XK_ANY_MOD,     "\r",            0,    0},
-	{ XK_Insert,        ShiftMask,      "\033[4l",      -1,    0},
-	{ XK_Insert,        ShiftMask,      "\033[2;2~",    +1,    0},
-	{ XK_Insert,        ControlMask,    "\033[L",       -1,    0},
-	{ XK_Insert,        ControlMask,    "\033[2;5~",    +1,    0},
-	{ XK_Insert,        XK_ANY_MOD,     "\033[4h",      -1,    0},
-	{ XK_Insert,        XK_ANY_MOD,     "\033[2~",      +1,    0},
-	{ XK_Delete,        ControlMask,    "\033[M",       -1,    0},
-	{ XK_Delete,        ControlMask,    "\033[3;5~",    +1,    0},
-	{ XK_Delete,        ShiftMask,      "\033[2K",      -1,    0},
-	{ XK_Delete,        ShiftMask,      "\033[3;2~",    +1,    0},
-	{ XK_Delete,        XK_ANY_MOD,     "\033[P",       -1,    0},
-	{ XK_Delete,        XK_ANY_MOD,     "\033[3~",      +1,    0},
-	{ XK_BackSpace,     XK_NO_MOD,      "\177",          0,    0},
-	{ XK_BackSpace,     Mod1Mask,       "\033\177",      0,    0},
-	{ XK_Home,          ShiftMask,      "\033[2J",       0,   -1},
-	{ XK_Home,          ShiftMask,      "\033[1;2H",     0,   +1},
-	{ XK_Home,          XK_ANY_MOD,     "\033[H",        0,   -1},
-	{ XK_Home,          XK_ANY_MOD,     "\033[1~",       0,   +1},
-	{ XK_End,           ControlMask,    "\033[J",       -1,    0},
-	{ XK_End,           ControlMask,    "\033[1;5F",    +1,    0},
-	{ XK_End,           ShiftMask,      "\033[K",       -1,    0},
-	{ XK_End,           ShiftMask,      "\033[1;2F",    +1,    0},
-	{ XK_End,           XK_ANY_MOD,     "\033[4~",       0,    0},
-	{ XK_Prior,         ControlMask,    "\033[5;5~",     0,    0},
-	{ XK_Prior,         ShiftMask,      "\033[5;2~",     0,    0},
-	{ XK_Prior,         XK_ANY_MOD,     "\033[5~",       0,    0},
-	{ XK_Next,          ControlMask,    "\033[6;5~",     0,    0},
-	{ XK_Next,          ShiftMask,      "\033[6;2~",     0,    0},
-	{ XK_Next,          XK_ANY_MOD,     "\033[6~",       0,    0},
-	{ XK_F1,            XK_NO_MOD,      "\033OP" ,       0,    0},
-	{ XK_F1, /* F13 */  ShiftMask,      "\033[1;2P",     0,    0},
-	{ XK_F1, /* F25 */  ControlMask,    "\033[1;5P",     0,    0},
-	{ XK_F1, /* F37 */  Mod4Mask,       "\033[1;6P",     0,    0},
-	{ XK_F1, /* F49 */  Mod1Mask,       "\033[1;3P",     0,    0},
-	{ XK_F1, /* F61 */  Mod3Mask,       "\033[1;4P",     0,    0},
-	{ XK_F2,            XK_NO_MOD,      "\033OQ" ,       0,    0},
-	{ XK_F2, /* F14 */  ShiftMask,      "\033[1;2Q",     0,    0},
-	{ XK_F2, /* F26 */  ControlMask,    "\033[1;5Q",     0,    0},
-	{ XK_F2, /* F38 */  Mod4Mask,       "\033[1;6Q",     0,    0},
-	{ XK_F2, /* F50 */  Mod1Mask,       "\033[1;3Q",     0,    0},
-	{ XK_F2, /* F62 */  Mod3Mask,       "\033[1;4Q",     0,    0},
-	{ XK_F3,            XK_NO_MOD,      "\033OR" ,       0,    0},
-	{ XK_F3, /* F15 */  ShiftMask,      "\033[1;2R",     0,    0},
-	{ XK_F3, /* F27 */  ControlMask,    "\033[1;5R",     0,    0},
-	{ XK_F3, /* F39 */  Mod4Mask,       "\033[1;6R",     0,    0},
-	{ XK_F3, /* F51 */  Mod1Mask,       "\033[1;3R",     0,    0},
-	{ XK_F3, /* F63 */  Mod3Mask,       "\033[1;4R",     0,    0},
-	{ XK_F4,            XK_NO_MOD,      "\033OS" ,       0,    0},
-	{ XK_F4, /* F16 */  ShiftMask,      "\033[1;2S",     0,    0},
-	{ XK_F4, /* F28 */  ControlMask,    "\033[1;5S",     0,    0},
-	{ XK_F4, /* F40 */  Mod4Mask,       "\033[1;6S",     0,    0},
-	{ XK_F4, /* F52 */  Mod1Mask,       "\033[1;3S",     0,    0},
-	{ XK_F5,            XK_NO_MOD,      "\033[15~",      0,    0},
-	{ XK_F5, /* F17 */  ShiftMask,      "\033[15;2~",    0,    0},
-	{ XK_F5, /* F29 */  ControlMask,    "\033[15;5~",    0,    0},
-	{ XK_F5, /* F41 */  Mod4Mask,       "\033[15;6~",    0,    0},
-	{ XK_F5, /* F53 */  Mod1Mask,       "\033[15;3~",    0,    0},
-	{ XK_F6,            XK_NO_MOD,      "\033[17~",      0,    0},
-	{ XK_F6, /* F18 */  ShiftMask,      "\033[17;2~",    0,    0},
-	{ XK_F6, /* F30 */  ControlMask,    "\033[17;5~",    0,    0},
-	{ XK_F6, /* F42 */  Mod4Mask,       "\033[17;6~",    0,    0},
-	{ XK_F6, /* F54 */  Mod1Mask,       "\033[17;3~",    0,    0},
-	{ XK_F7,            XK_NO_MOD,      "\033[18~",      0,    0},
-	{ XK_F7, /* F19 */  ShiftMask,      "\033[18;2~",    0,    0},
-	{ XK_F7, /* F31 */  ControlMask,    "\033[18;5~",    0,    0},
-	{ XK_F7, /* F43 */  Mod4Mask,       "\033[18;6~",    0,    0},
-	{ XK_F7, /* F55 */  Mod1Mask,       "\033[18;3~",    0,    0},
-	{ XK_F8,            XK_NO_MOD,      "\033[19~",      0,    0},
-	{ XK_F8, /* F20 */  ShiftMask,      "\033[19;2~",    0,    0},
-	{ XK_F8, /* F32 */  ControlMask,    "\033[19;5~",    0,    0},
-	{ XK_F8, /* F44 */  Mod4Mask,       "\033[19;6~",    0,    0},
-	{ XK_F8, /* F56 */  Mod1Mask,       "\033[19;3~",    0,    0},
-	{ XK_F9,            XK_NO_MOD,      "\033[20~",      0,    0},
-	{ XK_F9, /* F21 */  ShiftMask,      "\033[20;2~",    0,    0},
-	{ XK_F9, /* F33 */  ControlMask,    "\033[20;5~",    0,    0},
-	{ XK_F9, /* F45 */  Mod4Mask,       "\033[20;6~",    0,    0},
-	{ XK_F9, /* F57 */  Mod1Mask,       "\033[20;3~",    0,    0},
-	{ XK_F10,           XK_NO_MOD,      "\033[21~",      0,    0},
-	{ XK_F10, /* F22 */ ShiftMask,      "\033[21;2~",    0,    0},
-	{ XK_F10, /* F34 */ ControlMask,    "\033[21;5~",    0,    0},
-	{ XK_F10, /* F46 */ Mod4Mask,       "\033[21;6~",    0,    0},
-	{ XK_F10, /* F58 */ Mod1Mask,       "\033[21;3~",    0,    0},
-	{ XK_F11,           XK_NO_MOD,      "\033[23~",      0,    0},
-	{ XK_F11, /* F23 */ ShiftMask,      "\033[23;2~",    0,    0},
-	{ XK_F11, /* F35 */ ControlMask,    "\033[23;5~",    0,    0},
-	{ XK_F11, /* F47 */ Mod4Mask,       "\033[23;6~",    0,    0},
-	{ XK_F11, /* F59 */ Mod1Mask,       "\033[23;3~",    0,    0},
-	{ XK_F12,           XK_NO_MOD,      "\033[24~",      0,    0},
-	{ XK_F12, /* F24 */ ShiftMask,      "\033[24;2~",    0,    0},
-	{ XK_F12, /* F36 */ ControlMask,    "\033[24;5~",    0,    0},
-	{ XK_F12, /* F48 */ Mod4Mask,       "\033[24;6~",    0,    0},
-	{ XK_F12, /* F60 */ Mod1Mask,       "\033[24;3~",    0,    0},
-	{ XK_F13,           XK_NO_MOD,      "\033[1;2P",     0,    0},
-	{ XK_F14,           XK_NO_MOD,      "\033[1;2Q",     0,    0},
-	{ XK_F15,           XK_NO_MOD,      "\033[1;2R",     0,    0},
-	{ XK_F16,           XK_NO_MOD,      "\033[1;2S",     0,    0},
-	{ XK_F17,           XK_NO_MOD,      "\033[15;2~",    0,    0},
-	{ XK_F18,           XK_NO_MOD,      "\033[17;2~",    0,    0},
-	{ XK_F19,           XK_NO_MOD,      "\033[18;2~",    0,    0},
-	{ XK_F20,           XK_NO_MOD,      "\033[19;2~",    0,    0},
-	{ XK_F21,           XK_NO_MOD,      "\033[20;2~",    0,    0},
-	{ XK_F22,           XK_NO_MOD,      "\033[21;2~",    0,    0},
-	{ XK_F23,           XK_NO_MOD,      "\033[23;2~",    0,    0},
-	{ XK_F24,           XK_NO_MOD,      "\033[24;2~",    0,    0},
-	{ XK_F25,           XK_NO_MOD,      "\033[1;5P",     0,    0},
-	{ XK_F26,           XK_NO_MOD,      "\033[1;5Q",     0,    0},
-	{ XK_F27,           XK_NO_MOD,      "\033[1;5R",     0,    0},
-	{ XK_F28,           XK_NO_MOD,      "\033[1;5S",     0,    0},
-	{ XK_F29,           XK_NO_MOD,      "\033[15;5~",    0,    0},
-	{ XK_F30,           XK_NO_MOD,      "\033[17;5~",    0,    0},
-	{ XK_F31,           XK_NO_MOD,      "\033[18;5~",    0,    0},
-	{ XK_F32,           XK_NO_MOD,      "\033[19;5~",    0,    0},
-	{ XK_F33,           XK_NO_MOD,      "\033[20;5~",    0,    0},
-	{ XK_F34,           XK_NO_MOD,      "\033[21;5~",    0,    0},
-	{ XK_F35,           XK_NO_MOD,      "\033[23;5~",    0,    0},
+    /* keysym           mask            string      appkey appcursor */
+    {XK_KP_Home, ShiftMask, "\033[2J", 0, -1},
+    {XK_KP_Home, ShiftMask, "\033[1;2H", 0, +1},
+    {XK_KP_Home, XK_ANY_MOD, "\033[H", 0, -1},
+    {XK_KP_Home, XK_ANY_MOD, "\033[1~", 0, +1},
+    {XK_KP_Up, XK_ANY_MOD, "\033Ox", +1, 0},
+    {XK_KP_Up, XK_ANY_MOD, "\033[A", 0, -1},
+    {XK_KP_Up, XK_ANY_MOD, "\033OA", 0, +1},
+    {XK_KP_Down, XK_ANY_MOD, "\033Or", +1, 0},
+    {XK_KP_Down, XK_ANY_MOD, "\033[B", 0, -1},
+    {XK_KP_Down, XK_ANY_MOD, "\033OB", 0, +1},
+    {XK_KP_Left, XK_ANY_MOD, "\033Ot", +1, 0},
+    {XK_KP_Left, XK_ANY_MOD, "\033[D", 0, -1},
+    {XK_KP_Left, XK_ANY_MOD, "\033OD", 0, +1},
+    {XK_KP_Right, XK_ANY_MOD, "\033Ov", +1, 0},
+    {XK_KP_Right, XK_ANY_MOD, "\033[C", 0, -1},
+    {XK_KP_Right, XK_ANY_MOD, "\033OC", 0, +1},
+    {XK_KP_Prior, ShiftMask, "\033[5;2~", 0, 0},
+    {XK_KP_Prior, XK_ANY_MOD, "\033[5~", 0, 0},
+    {XK_KP_Begin, XK_ANY_MOD, "\033[E", 0, 0},
+    {XK_KP_End, ControlMask, "\033[J", -1, 0},
+    {XK_KP_End, ControlMask, "\033[1;5F", +1, 0},
+    {XK_KP_End, ShiftMask, "\033[K", -1, 0},
+    {XK_KP_End, ShiftMask, "\033[1;2F", +1, 0},
+    {XK_KP_End, XK_ANY_MOD, "\033[4~", 0, 0},
+    {XK_KP_Next, ShiftMask, "\033[6;2~", 0, 0},
+    {XK_KP_Next, XK_ANY_MOD, "\033[6~", 0, 0},
+    {XK_KP_Insert, ShiftMask, "\033[2;2~", +1, 0},
+    {XK_KP_Insert, ShiftMask, "\033[4l", -1, 0},
+    {XK_KP_Insert, ControlMask, "\033[L", -1, 0},
+    {XK_KP_Insert, ControlMask, "\033[2;5~", +1, 0},
+    {XK_KP_Insert, XK_ANY_MOD, "\033[4h", -1, 0},
+    {XK_KP_Insert, XK_ANY_MOD, "\033[2~", +1, 0},
+    {XK_KP_Delete, ControlMask, "\033[M", -1, 0},
+    {XK_KP_Delete, ControlMask, "\033[3;5~", +1, 0},
+    {XK_KP_Delete, ShiftMask, "\033[2K", -1, 0},
+    {XK_KP_Delete, ShiftMask, "\033[3;2~", +1, 0},
+    {XK_KP_Delete, XK_ANY_MOD, "\033[P", -1, 0},
+    {XK_KP_Delete, XK_ANY_MOD, "\033[3~", +1, 0},
+    {XK_KP_Multiply, XK_ANY_MOD, "\033Oj", +2, 0},
+    {XK_KP_Add, XK_ANY_MOD, "\033Ok", +2, 0},
+    {XK_KP_Enter, XK_ANY_MOD, "\033OM", +2, 0},
+    {XK_KP_Enter, XK_ANY_MOD, "\r", -1, 0},
+    {XK_KP_Subtract, XK_ANY_MOD, "\033Om", +2, 0},
+    {XK_KP_Decimal, XK_ANY_MOD, "\033On", +2, 0},
+    {XK_KP_Divide, XK_ANY_MOD, "\033Oo", +2, 0},
+    {XK_KP_0, XK_ANY_MOD, "\033Op", +2, 0},
+    {XK_KP_1, XK_ANY_MOD, "\033Oq", +2, 0},
+    {XK_KP_2, XK_ANY_MOD, "\033Or", +2, 0},
+    {XK_KP_3, XK_ANY_MOD, "\033Os", +2, 0},
+    {XK_KP_4, XK_ANY_MOD, "\033Ot", +2, 0},
+    {XK_KP_5, XK_ANY_MOD, "\033Ou", +2, 0},
+    {XK_KP_6, XK_ANY_MOD, "\033Ov", +2, 0},
+    {XK_KP_7, XK_ANY_MOD, "\033Ow", +2, 0},
+    {XK_KP_8, XK_ANY_MOD, "\033Ox", +2, 0},
+    {XK_KP_9, XK_ANY_MOD, "\033Oy", +2, 0},
+    {XK_Up, ShiftMask, "\033[1;2A", 0, 0},
+    {XK_Up, Mod1Mask, "\033[1;3A", 0, 0},
+    {XK_Up, ShiftMask | Mod1Mask, "\033[1;4A", 0, 0},
+    {XK_Up, ControlMask, "\033[1;5A", 0, 0},
+    {XK_Up, ShiftMask | ControlMask, "\033[1;6A", 0, 0},
+    {XK_Up, ControlMask | Mod1Mask, "\033[1;7A", 0, 0},
+    {XK_Up, ShiftMask | ControlMask | Mod1Mask, "\033[1;8A", 0, 0},
+    {XK_Up, XK_ANY_MOD, "\033[A", 0, -1},
+    {XK_Up, XK_ANY_MOD, "\033OA", 0, +1},
+    {XK_Down, ShiftMask, "\033[1;2B", 0, 0},
+    {XK_Down, Mod1Mask, "\033[1;3B", 0, 0},
+    {XK_Down, ShiftMask | Mod1Mask, "\033[1;4B", 0, 0},
+    {XK_Down, ControlMask, "\033[1;5B", 0, 0},
+    {XK_Down, ShiftMask | ControlMask, "\033[1;6B", 0, 0},
+    {XK_Down, ControlMask | Mod1Mask, "\033[1;7B", 0, 0},
+    {XK_Down, ShiftMask | ControlMask | Mod1Mask, "\033[1;8B", 0, 0},
+    {XK_Down, XK_ANY_MOD, "\033[B", 0, -1},
+    {XK_Down, XK_ANY_MOD, "\033OB", 0, +1},
+    {XK_Left, ShiftMask, "\033[1;2D", 0, 0},
+    {XK_Left, Mod1Mask, "\033[1;3D", 0, 0},
+    {XK_Left, ShiftMask | Mod1Mask, "\033[1;4D", 0, 0},
+    {XK_Left, ControlMask, "\033[1;5D", 0, 0},
+    {XK_Left, ShiftMask | ControlMask, "\033[1;6D", 0, 0},
+    {XK_Left, ControlMask | Mod1Mask, "\033[1;7D", 0, 0},
+    {XK_Left, ShiftMask | ControlMask | Mod1Mask, "\033[1;8D", 0, 0},
+    {XK_Left, XK_ANY_MOD, "\033[D", 0, -1},
+    {XK_Left, XK_ANY_MOD, "\033OD", 0, +1},
+    {XK_Right, ShiftMask, "\033[1;2C", 0, 0},
+    {XK_Right, Mod1Mask, "\033[1;3C", 0, 0},
+    {XK_Right, ShiftMask | Mod1Mask, "\033[1;4C", 0, 0},
+    {XK_Right, ControlMask, "\033[1;5C", 0, 0},
+    {XK_Right, ShiftMask | ControlMask, "\033[1;6C", 0, 0},
+    {XK_Right, ControlMask | Mod1Mask, "\033[1;7C", 0, 0},
+    {XK_Right, ShiftMask | ControlMask | Mod1Mask, "\033[1;8C", 0, 0},
+    {XK_Right, XK_ANY_MOD, "\033[C", 0, -1},
+    {XK_Right, XK_ANY_MOD, "\033OC", 0, +1},
+    {XK_ISO_Left_Tab, ShiftMask, "\033[Z", 0, 0},
+    {XK_Return, Mod1Mask, "\033\r", 0, 0},
+    {XK_Return, XK_ANY_MOD, "\r", 0, 0},
+    {XK_Insert, ShiftMask, "\033[4l", -1, 0},
+    {XK_Insert, ShiftMask, "\033[2;2~", +1, 0},
+    {XK_Insert, ControlMask, "\033[L", -1, 0},
+    {XK_Insert, ControlMask, "\033[2;5~", +1, 0},
+    {XK_Insert, XK_ANY_MOD, "\033[4h", -1, 0},
+    {XK_Insert, XK_ANY_MOD, "\033[2~", +1, 0},
+    {XK_Delete, ControlMask, "\033[M", -1, 0},
+    {XK_Delete, ControlMask, "\033[3;5~", +1, 0},
+    {XK_Delete, ShiftMask, "\033[2K", -1, 0},
+    {XK_Delete, ShiftMask, "\033[3;2~", +1, 0},
+    {XK_Delete, XK_ANY_MOD, "\033[P", -1, 0},
+    {XK_Delete, XK_ANY_MOD, "\033[3~", +1, 0},
+    {XK_BackSpace, XK_NO_MOD, "\177", 0, 0},
+    {XK_BackSpace, Mod1Mask, "\033\177", 0, 0},
+    {XK_Home, ShiftMask, "\033[2J", 0, -1},
+    {XK_Home, ShiftMask, "\033[1;2H", 0, +1},
+    {XK_Home, XK_ANY_MOD, "\033[H", 0, -1},
+    {XK_Home, XK_ANY_MOD, "\033[1~", 0, +1},
+    {XK_End, ControlMask, "\033[J", -1, 0},
+    {XK_End, ControlMask, "\033[1;5F", +1, 0},
+    {XK_End, ShiftMask, "\033[K", -1, 0},
+    {XK_End, ShiftMask, "\033[1;2F", +1, 0},
+    {XK_End, XK_ANY_MOD, "\033[4~", 0, 0},
+    {XK_Prior, ControlMask, "\033[5;5~", 0, 0},
+    {XK_Prior, ShiftMask, "\033[5;2~", 0, 0},
+    {XK_Prior, XK_ANY_MOD, "\033[5~", 0, 0},
+    {XK_Next, ControlMask, "\033[6;5~", 0, 0},
+    {XK_Next, ShiftMask, "\033[6;2~", 0, 0},
+    {XK_Next, XK_ANY_MOD, "\033[6~", 0, 0},
+    {XK_F1, XK_NO_MOD, "\033OP", 0, 0},
+    {XK_F1, /* F13 */ ShiftMask, "\033[1;2P", 0, 0},
+    {XK_F1, /* F25 */ ControlMask, "\033[1;5P", 0, 0},
+    {XK_F1, /* F37 */ Mod4Mask, "\033[1;6P", 0, 0},
+    {XK_F1, /* F49 */ Mod1Mask, "\033[1;3P", 0, 0},
+    {XK_F1, /* F61 */ Mod3Mask, "\033[1;4P", 0, 0},
+    {XK_F2, XK_NO_MOD, "\033OQ", 0, 0},
+    {XK_F2, /* F14 */ ShiftMask, "\033[1;2Q", 0, 0},
+    {XK_F2, /* F26 */ ControlMask, "\033[1;5Q", 0, 0},
+    {XK_F2, /* F38 */ Mod4Mask, "\033[1;6Q", 0, 0},
+    {XK_F2, /* F50 */ Mod1Mask, "\033[1;3Q", 0, 0},
+    {XK_F2, /* F62 */ Mod3Mask, "\033[1;4Q", 0, 0},
+    {XK_F3, XK_NO_MOD, "\033OR", 0, 0},
+    {XK_F3, /* F15 */ ShiftMask, "\033[1;2R", 0, 0},
+    {XK_F3, /* F27 */ ControlMask, "\033[1;5R", 0, 0},
+    {XK_F3, /* F39 */ Mod4Mask, "\033[1;6R", 0, 0},
+    {XK_F3, /* F51 */ Mod1Mask, "\033[1;3R", 0, 0},
+    {XK_F3, /* F63 */ Mod3Mask, "\033[1;4R", 0, 0},
+    {XK_F4, XK_NO_MOD, "\033OS", 0, 0},
+    {XK_F4, /* F16 */ ShiftMask, "\033[1;2S", 0, 0},
+    {XK_F4, /* F28 */ ControlMask, "\033[1;5S", 0, 0},
+    {XK_F4, /* F40 */ Mod4Mask, "\033[1;6S", 0, 0},
+    {XK_F4, /* F52 */ Mod1Mask, "\033[1;3S", 0, 0},
+    {XK_F5, XK_NO_MOD, "\033[15~", 0, 0},
+    {XK_F5, /* F17 */ ShiftMask, "\033[15;2~", 0, 0},
+    {XK_F5, /* F29 */ ControlMask, "\033[15;5~", 0, 0},
+    {XK_F5, /* F41 */ Mod4Mask, "\033[15;6~", 0, 0},
+    {XK_F5, /* F53 */ Mod1Mask, "\033[15;3~", 0, 0},
+    {XK_F6, XK_NO_MOD, "\033[17~", 0, 0},
+    {XK_F6, /* F18 */ ShiftMask, "\033[17;2~", 0, 0},
+    {XK_F6, /* F30 */ ControlMask, "\033[17;5~", 0, 0},
+    {XK_F6, /* F42 */ Mod4Mask, "\033[17;6~", 0, 0},
+    {XK_F6, /* F54 */ Mod1Mask, "\033[17;3~", 0, 0},
+    {XK_F7, XK_NO_MOD, "\033[18~", 0, 0},
+    {XK_F7, /* F19 */ ShiftMask, "\033[18;2~", 0, 0},
+    {XK_F7, /* F31 */ ControlMask, "\033[18;5~", 0, 0},
+    {XK_F7, /* F43 */ Mod4Mask, "\033[18;6~", 0, 0},
+    {XK_F7, /* F55 */ Mod1Mask, "\033[18;3~", 0, 0},
+    {XK_F8, XK_NO_MOD, "\033[19~", 0, 0},
+    {XK_F8, /* F20 */ ShiftMask, "\033[19;2~", 0, 0},
+    {XK_F8, /* F32 */ ControlMask, "\033[19;5~", 0, 0},
+    {XK_F8, /* F44 */ Mod4Mask, "\033[19;6~", 0, 0},
+    {XK_F8, /* F56 */ Mod1Mask, "\033[19;3~", 0, 0},
+    {XK_F9, XK_NO_MOD, "\033[20~", 0, 0},
+    {XK_F9, /* F21 */ ShiftMask, "\033[20;2~", 0, 0},
+    {XK_F9, /* F33 */ ControlMask, "\033[20;5~", 0, 0},
+    {XK_F9, /* F45 */ Mod4Mask, "\033[20;6~", 0, 0},
+    {XK_F9, /* F57 */ Mod1Mask, "\033[20;3~", 0, 0},
+    {XK_F10, XK_NO_MOD, "\033[21~", 0, 0},
+    {XK_F10, /* F22 */ ShiftMask, "\033[21;2~", 0, 0},
+    {XK_F10, /* F34 */ ControlMask, "\033[21;5~", 0, 0},
+    {XK_F10, /* F46 */ Mod4Mask, "\033[21;6~", 0, 0},
+    {XK_F10, /* F58 */ Mod1Mask, "\033[21;3~", 0, 0},
+    {XK_F11, XK_NO_MOD, "\033[23~", 0, 0},
+    {XK_F11, /* F23 */ ShiftMask, "\033[23;2~", 0, 0},
+    {XK_F11, /* F35 */ ControlMask, "\033[23;5~", 0, 0},
+    {XK_F11, /* F47 */ Mod4Mask, "\033[23;6~", 0, 0},
+    {XK_F11, /* F59 */ Mod1Mask, "\033[23;3~", 0, 0},
+    {XK_F12, XK_NO_MOD, "\033[24~", 0, 0},
+    {XK_F12, /* F24 */ ShiftMask, "\033[24;2~", 0, 0},
+    {XK_F12, /* F36 */ ControlMask, "\033[24;5~", 0, 0},
+    {XK_F12, /* F48 */ Mod4Mask, "\033[24;6~", 0, 0},
+    {XK_F12, /* F60 */ Mod1Mask, "\033[24;3~", 0, 0},
+    {XK_F13, XK_NO_MOD, "\033[1;2P", 0, 0},
+    {XK_F14, XK_NO_MOD, "\033[1;2Q", 0, 0},
+    {XK_F15, XK_NO_MOD, "\033[1;2R", 0, 0},
+    {XK_F16, XK_NO_MOD, "\033[1;2S", 0, 0},
+    {XK_F17, XK_NO_MOD, "\033[15;2~", 0, 0},
+    {XK_F18, XK_NO_MOD, "\033[17;2~", 0, 0},
+    {XK_F19, XK_NO_MOD, "\033[18;2~", 0, 0},
+    {XK_F20, XK_NO_MOD, "\033[19;2~", 0, 0},
+    {XK_F21, XK_NO_MOD, "\033[20;2~", 0, 0},
+    {XK_F22, XK_NO_MOD, "\033[21;2~", 0, 0},
+    {XK_F23, XK_NO_MOD, "\033[23;2~", 0, 0},
+    {XK_F24, XK_NO_MOD, "\033[24;2~", 0, 0},
+    {XK_F25, XK_NO_MOD, "\033[1;5P", 0, 0},
+    {XK_F26, XK_NO_MOD, "\033[1;5Q", 0, 0},
+    {XK_F27, XK_NO_MOD, "\033[1;5R", 0, 0},
+    {XK_F28, XK_NO_MOD, "\033[1;5S", 0, 0},
+    {XK_F29, XK_NO_MOD, "\033[15;5~", 0, 0},
+    {XK_F30, XK_NO_MOD, "\033[17;5~", 0, 0},
+    {XK_F31, XK_NO_MOD, "\033[18;5~", 0, 0},
+    {XK_F32, XK_NO_MOD, "\033[19;5~", 0, 0},
+    {XK_F33, XK_NO_MOD, "\033[20;5~", 0, 0},
+    {XK_F34, XK_NO_MOD, "\033[21;5~", 0, 0},
+    {XK_F35, XK_NO_MOD, "\033[23;5~", 0, 0},
 };

 /*
@@ -455,14 +454,13 @@ static Key key[] = {
  * If no match is found, regular selection is used.
  */
 static uint selmasks[] = {
-	[SEL_RECTANGULAR] = Mod1Mask,
+    [SEL_RECTANGULAR] = Mod1Mask,
 };

 /*
  * Printable characters in ASCII, used to estimate the advance width
  * of single wide characters.
  */
-static char ascii_printable[] =
-	" !\"#$%&'()*+,-./0123456789:;<=>?"
-	"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
-	"`abcdefghijklmnopqrstuvwxyz{|}~";
+static char ascii_printable[] = " !\"#$%&'()*+,-./0123456789:;<=>?"
+                                "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
+                                "`abcdefghijklmnopqrstuvwxyz{|}~";

commit fbeac46577bde89221cad746affd2b3ad78c7b76
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:15:27 2022 +0900

    Fira Code font

diff --git a/config.def.h b/config.def.h
index 95a28ce..7730da0 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,7 +5,8 @@
  *
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
-static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
+static char *font =
+    "FiraCode Nerd Font:pixelsize=24:antialias=true:autohint=true";
 static int borderpx = 2;

 /*

commit 3f659a6bdbb6b813bf0184ef552a890443cbe0da
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:18:04 2022 +0900

    themed cursor

diff --git a/config.def.h b/config.def.h
index 7730da0..51d270c 100644
--- a/config.def.h
+++ b/config.def.h
@@ -147,9 +147,7 @@ static unsigned int rows = 24;
 /*
  * Default colour and shape of the mouse cursor
  */
-static unsigned int mouseshape = XC_xterm;
-static unsigned int mousefg = 7;
-static unsigned int mousebg = 0;
+static char *mouseshape = "xterm";

 /*
  * Color used to display font attributes when fontconfig selected a font which
diff --git a/x.c b/x.c
index 8a16faa..f61c6a0 100644
--- a/x.c
+++ b/x.c
@@ -14,6 +14,7 @@
 #include <X11/keysym.h>
 #include <X11/Xft/Xft.h>
 #include <X11/XKBlib.h>
+#include <X11/Xcursor/Xcursor.h>

 char *argv0;
 #include "arg.h"
@@ -1181,21 +1182,9 @@ xinit(int cols, int rows)
 	}

 	/* white cursor, black outline */
-	cursor = XCreateFontCursor(xw.dpy, mouseshape);
+	cursor = XcursorLibraryLoadCursor(xw.dpy, mouseshape);
 	XDefineCursor(xw.dpy, xw.win, cursor);

-	if (XParseColor(xw.dpy, xw.cmap, colorname[mousefg], &xmousefg) == 0) {
-		xmousefg.red   = 0xffff;
-		xmousefg.green = 0xffff;
-		xmousefg.blue  = 0xffff;
-	}
-
-	if (XParseColor(xw.dpy, xw.cmap, colorname[mousebg], &xmousebg) == 0) {
-		xmousebg.red   = 0x0000;
-		xmousebg.green = 0x0000;
-		xmousebg.blue  = 0x0000;
-	}
-
 	XRecolorCursor(xw.dpy, cursor, &xmousefg, &xmousebg);

 	xw.xembed = XInternAtom(xw.dpy, "_XEMBED", False);

commit fc8ec084644f376692d43e93da62252c688f1d88
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:21:42 2022 +0900

    ligatures

diff --git a/Makefile b/Makefile
index 470ac86..38240da 100644
--- a/Makefile
+++ b/Makefile
@@ -4,7 +4,7 @@

 include config.mk

-SRC = st.c x.c
+SRC = st.c x.c hb.c
 OBJ = $(SRC:.c=.o)

 all: options st
@@ -22,7 +22,8 @@ config.h:
 	$(CC) $(STCFLAGS) -c $<

 st.o: config.h st.h win.h
-x.o: arg.h config.h st.h win.h
+x.o: arg.h config.h st.h win.h hb.h
+hb.o: st.h

 $(OBJ): config.h config.mk

diff --git a/config.mk b/config.mk
index 4c4c5d5..82b5510 100644
--- a/config.mk
+++ b/config.mk
@@ -15,10 +15,12 @@ PKG_CONFIG = pkg-config
 # includes and libs
 INCS = -I$(X11INC) \
        `$(PKG_CONFIG) --cflags fontconfig` \
-       `$(PKG_CONFIG) --cflags freetype2`
+       `$(PKG_CONFIG) --cflags freetype2` \
+       `$(PKG_CONFIG) --cflags harfbuzz`
 LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
        `$(PKG_CONFIG) --libs fontconfig` \
-       `$(PKG_CONFIG) --libs freetype2`
+       `$(PKG_CONFIG) --libs freetype2` \
+       `$(PKG_CONFIG) --libs harfbuzz`

 # flags
 STCPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600
diff --git a/hb.c b/hb.c
new file mode 100644
index 0000000..077a10d
--- /dev/null
+++ b/hb.c
@@ -0,0 +1,145 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <math.h>
+#include <X11/Xft/Xft.h>
+#include <X11/cursorfont.h>
+#include <hb.h>
+#include <hb-ft.h>
+
+#include "st.h"
+
+#define FEATURE(c1,c2,c3,c4) { .tag = HB_TAG(c1,c2,c3,c4), .value = 1, .start = HB_FEATURE_GLOBAL_START, .end = HB_FEATURE_GLOBAL_END }
+
+void hbtransformsegment(XftFont *xfont, const Glyph *string, hb_codepoint_t *codepoints, int start, int length);
+hb_font_t *hbfindfont(XftFont *match);
+
+typedef struct {
+	XftFont *match;
+	hb_font_t *font;
+} HbFontMatch;
+
+static int hbfontslen = 0;
+static HbFontMatch *hbfontcache = NULL;
+
+/*
+ * Replace 0 with a list of font features, wrapped in FEATURE macro, e.g.
+ * FEATURE('c', 'a', 'l', 't'), FEATURE('d', 'l', 'i', 'g')
+ */
+hb_feature_t features[] = { 0 };
+
+void
+hbunloadfonts()
+{
+	for (int i = 0; i < hbfontslen; i++) {
+		hb_font_destroy(hbfontcache[i].font);
+		XftUnlockFace(hbfontcache[i].match);
+	}
+
+	if (hbfontcache != NULL) {
+		free(hbfontcache);
+		hbfontcache = NULL;
+	}
+	hbfontslen = 0;
+}
+
+hb_font_t *
+hbfindfont(XftFont *match)
+{
+	for (int i = 0; i < hbfontslen; i++) {
+		if (hbfontcache[i].match == match)
+			return hbfontcache[i].font;
+	}
+
+	/* Font not found in cache, caching it now. */
+	hbfontcache = realloc(hbfontcache, sizeof(HbFontMatch) * (hbfontslen + 1));
+	FT_Face face = XftLockFace(match);
+	hb_font_t *font = hb_ft_font_create(face, NULL);
+	if (font == NULL)
+		die("Failed to load Harfbuzz font.");
+
+	hbfontcache[hbfontslen].match = match;
+	hbfontcache[hbfontslen].font = font;
+	hbfontslen += 1;
+
+	return font;
+}
+
+void
+hbtransform(XftGlyphFontSpec *specs, const Glyph *glyphs, size_t len, int x, int y)
+{
+	int start = 0, length = 1, gstart = 0;
+	hb_codepoint_t *codepoints = calloc((unsigned int)len, sizeof(hb_codepoint_t));
+
+	for (int idx = 1, specidx = 1; idx < len; idx++) {
+		if (glyphs[idx].mode & ATTR_WDUMMY) {
+			length += 1;
+			continue;
+		}
+
+		if (specs[specidx].font != specs[start].font || ATTRCMP(glyphs[gstart], glyphs[idx]) || selected(x + idx, y) != selected(x + gstart, y)) {
+			hbtransformsegment(specs[start].font, glyphs, codepoints, gstart, length);
+
+			/* Reset the sequence. */
+			length = 1;
+			start = specidx;
+			gstart = idx;
+		} else {
+			length += 1;
+		}
+
+		specidx++;
+	}
+
+	/* EOL. */
+	hbtransformsegment(specs[start].font, glyphs, codepoints, gstart, length);
+
+	/* Apply the transformation to glyph specs. */
+	for (int i = 0, specidx = 0; i < len; i++) {
+		if (glyphs[i].mode & ATTR_WDUMMY)
+			continue;
+
+		if (codepoints[i] != specs[specidx].glyph)
+			((Glyph *)glyphs)[i].mode |= ATTR_LIGA;
+
+		specs[specidx++].glyph = codepoints[i];
+	}
+
+	free(codepoints);
+}
+
+void
+hbtransformsegment(XftFont *xfont, const Glyph *string, hb_codepoint_t *codepoints, int start, int length)
+{
+	hb_font_t *font = hbfindfont(xfont);
+	if (font == NULL)
+		return;
+
+	Rune rune;
+	ushort mode = USHRT_MAX;
+	hb_buffer_t *buffer = hb_buffer_create();
+	hb_buffer_set_direction(buffer, HB_DIRECTION_LTR);
+
+	/* Fill buffer with codepoints. */
+	for (int i = start; i < (start+length); i++) {
+		rune = string[i].u;
+		mode = string[i].mode;
+		if (mode & ATTR_WDUMMY)
+			rune = 0x0020;
+		hb_buffer_add_codepoints(buffer, &rune, 1, 0, 1);
+	}
+
+	/* Shape the segment. */
+	hb_shape(font, buffer, features, sizeof(features));
+
+	/* Get new glyph info. */
+	hb_glyph_info_t *info = hb_buffer_get_glyph_infos(buffer, NULL);
+
+	/* Write new codepoints. */
+	for (int i = 0; i < length; i++) {
+		hb_codepoint_t gid = info[i].codepoint;
+		codepoints[start+i] = gid;
+	}
+
+	/* Cleanup. */
+	hb_buffer_destroy(buffer);
+}
diff --git a/hb.h b/hb.h
new file mode 100644
index 0000000..07888df
--- /dev/null
+++ b/hb.h
@@ -0,0 +1,6 @@
+#include <X11/Xft/Xft.h>
+#include <hb.h>
+#include <hb-ft.h>
+
+void hbunloadfonts();
+void hbtransform(XftGlyphFontSpec *, const Glyph *, size_t, int, int);
diff --git a/st.c b/st.c
index 51049ba..fbf9fc4 100644
--- a/st.c
+++ b/st.c
@@ -2674,7 +2674,8 @@ draw(void)

 	drawregion(0, 0, term.col, term.row);
 	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
-			term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+			term.ocx, term.ocy, term.line[term.ocy][term.ocx],
+			term.line[term.ocy], term.col);
 	term.ocx = cx;
 	term.ocy = term.c.y;
 	xfinishdraw();
diff --git a/st.h b/st.h
index 519b9bd..7a9cb1e 100644
--- a/st.h
+++ b/st.h
@@ -11,7 +11,8 @@
 #define DIVCEIL(n, d)		(((n) + ((d) - 1)) / (d))
 #define DEFAULT(a, b)		(a) = (a) ? (a) : (b)
 #define LIMIT(x, a, b)		(x) = (x) < (a) ? (a) : (x) > (b) ? (b) : (x)
-#define ATTRCMP(a, b)		((a).mode != (b).mode || (a).fg != (b).fg || \
+#define ATTRCMP(a, b)		(((a).mode & (~ATTR_WRAP) & (~ATTR_LIGA)) != ((b).mode & (~ATTR_WRAP) & (~ATTR_LIGA)) || \
+				(a).fg != (b).fg || \
 				(a).bg != (b).bg)
 #define TIMEDIFF(t1, t2)	((t1.tv_sec-t2.tv_sec)*1000 + \
 				(t1.tv_nsec-t2.tv_nsec)/1E6)
@@ -33,6 +34,7 @@ enum glyph_attribute {
 	ATTR_WRAP       = 1 << 8,
 	ATTR_WIDE       = 1 << 9,
 	ATTR_WDUMMY     = 1 << 10,
+	ATTR_LIGA       = 1 << 11,
 	ATTR_BOLD_FAINT = ATTR_BOLD | ATTR_FAINT,
 };

diff --git a/win.h b/win.h
index e6e4369..8b5b618 100644
--- a/win.h
+++ b/win.h
@@ -25,7 +25,7 @@ enum win_mode {

 void xbell(void);
 void xclipcopy(void);
-void xdrawcursor(int, int, Glyph, int, int, Glyph);
+void xdrawcursor(int, int, Glyph, int, int, Glyph, Line, int);
 void xdrawline(Line, int, int, int);
 void xfinishdraw(void);
 void xloadcols(void);
diff --git a/x.c b/x.c
index f61c6a0..29d22e5 100644
--- a/x.c
+++ b/x.c
@@ -20,6 +20,7 @@ char *argv0;
 #include "arg.h"
 #include "st.h"
 #include "win.h"
+#include "hb.h"

 /* types used in config.h */
 typedef struct {
@@ -1047,6 +1048,9 @@ xunloadfont(Font *f)
 void
 xunloadfonts(void)
 {
+	/* Clear Harfbuzz font cache. */
+	hbunloadfonts();
+
 	/* Free the loaded fonts in the font cache.  */
 	while (frclen > 0)
 		XftFontClose(xw.dpy, frc[--frclen].font);
@@ -1234,7 +1238,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		mode = glyphs[i].mode;

 		/* Skip dummy wide-character spacing. */
-		if (mode == ATTR_WDUMMY)
+		if (mode & ATTR_WDUMMY)
 			continue;

 		/* Determine font for glyph if different from previous glyph. */
@@ -1341,6 +1345,9 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		numspecs++;
 	}

+	/* Harfbuzz transformation for ligatures. */
+	hbtransform(specs, glyphs, len, x, y);
+
 	return numspecs;
 }

@@ -1490,14 +1497,17 @@ xdrawglyph(Glyph g, int x, int y)
 }

 void
-xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
+xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og, Line line, int len)
 {
 	Color drawcol;

 	/* remove the old cursor */
 	if (selected(ox, oy))
 		og.mode ^= ATTR_REVERSE;
-	xdrawglyph(og, ox, oy);
+
+	/* Redraw the line where cursor was previously.
+	 * It will restore the ligatures broken by the cursor. */
+	xdrawline(line, 0, oy, len);

 	if (IS_SET(MODE_HIDE))
 		return;

commit 3a8df3e6802aad8e61c6970b8f994367eebb9180
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:23:47 2022 +0900

    zoom

diff --git a/config.def.h b/config.def.h
index 51d270c..f80b4f3 100644
--- a/config.def.h
+++ b/config.def.h
@@ -191,6 +191,9 @@ static Shortcut shortcuts[] = {
     {TERMMOD, XK_C, clipcopy, {.i = 0}},
     {TERMMOD, XK_V, clippaste, {.i = 0}},
     {TERMMOD, XK_Y, selpaste, {.i = 0}},
+    {TERMMOD, XK_plus, zoom, {.f = +3}},           // ctrl +
+    {TERMMOD, XK_underscore, zoom, {.f = -3}},     // ctrl -
+    {TERMMOD, XK_parenright, zoomreset, {.f = 0}}, // ctrl 0
     {ShiftMask, XK_Insert, selpaste, {.i = 0}},
     {TERMMOD, XK_Num_Lock, numlock, {.i = 0}},
 };

commit 0bb86de6878845248f3553256e1a25b5d94efbf7
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:43:33 2022 +0900

    foreground

diff --git a/config.def.h b/config.def.h
index f80b4f3..0f9288a 100644
--- a/config.def.h
+++ b/config.def.h
@@ -125,7 +125,7 @@ static const char *colorname[] = {
  */
 unsigned int defaultfg = 7;
 unsigned int defaultbg = 0;
-unsigned int defaultcs = 15;
+unsigned int defaultcs = 7;
 static unsigned int defaultrcs = 0;

 /*

commit f1b9fa4bcdbc275eee451e81269e1546745d426c
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 04:56:20 2022 +0900

    scrollback-ringbuffer

diff --git a/config.def.h b/config.def.h
index 0f9288a..eb1e9ee 100644
--- a/config.def.h
+++ b/config.def.h
@@ -196,6 +196,8 @@ static Shortcut shortcuts[] = {
     {TERMMOD, XK_parenright, zoomreset, {.f = 0}}, // ctrl 0
     {ShiftMask, XK_Insert, selpaste, {.i = 0}},
     {TERMMOD, XK_Num_Lock, numlock, {.i = 0}},
+    {ShiftMask, XK_Page_Up, kscrollup, {.i = -1}},
+    {ShiftMask, XK_Page_Down, kscrolldown, {.i = -1}},
 };

 /*
diff --git a/st.c b/st.c
index fbf9fc4..dcde6b5 100644
--- a/st.c
+++ b/st.c
@@ -43,6 +43,10 @@
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
 #define ISDELIM(u)		(u && wcschr(worddelimiters, u))

+#define TSCREEN term.screen[IS_SET(MODE_ALTSCREEN)]
+#define TLINEOFFSET(y) (((y) + TSCREEN.cur - TSCREEN.off + TSCREEN.size) % TSCREEN.size)
+#define TLINE(y) (TSCREEN.buffer[TLINEOFFSET(y)])
+
 enum term_mode {
 	MODE_WRAP        = 1 << 0,
 	MODE_INSERT      = 1 << 1,
@@ -109,12 +113,21 @@ typedef struct {
 	int alt;
 } Selection;

+/* Screen lines */
+typedef struct {
+	Line* buffer;  /* ring buffer */
+	int size;      /* size of buffer */
+	int cur;       /* start of active screen */
+	int off;       /* scrollback line offset */
+	TCursor sc;    /* saved cursor */
+} LineBuffer;
+
 /* Internal representation of the screen */
 typedef struct {
 	int row;      /* nb row */
 	int col;      /* nb col */
-	Line *line;   /* screen */
-	Line *alt;    /* alternate screen */
+	LineBuffer screen[2]; /* screen and alternate screen */
+	int linelen;  /* allocated line length */
 	int *dirty;   /* dirtyness of lines */
 	TCursor c;    /* cursor */
 	int ocx;      /* old cursor col */
@@ -202,6 +215,8 @@ static void tdeftran(char);
 static void tstrsequence(uchar);

 static void drawregion(int, int, int, int);
+static void clearline(Line, Glyph, int, int);
+static Line ensureline(Line);

 static void selnormalize(void);
 static void selscroll(int, int);
@@ -415,11 +430,12 @@ int
 tlinelen(int y)
 {
 	int i = term.col;
+	Line line = TLINE(y);

-	if (term.line[y][i - 1].mode & ATTR_WRAP)
+	if (line[i - 1].mode & ATTR_WRAP)
 		return i;

-	while (i > 0 && term.line[y][i - 1].u == ' ')
+	while (i > 0 && line[i - 1].u == ' ')
 		--i;

 	return i;
@@ -528,7 +544,7 @@ selsnap(int *x, int *y, int direction)
 		 * Snap around if the word wraps around at the end or
 		 * beginning of a line.
 		 */
-		prevgp = &term.line[*y][*x];
+		prevgp = &TLINE(*y)[*x];
 		prevdelim = ISDELIM(prevgp->u);
 		for (;;) {
 			newx = *x + direction;
@@ -543,14 +559,14 @@ selsnap(int *x, int *y, int direction)
 					yt = *y, xt = *x;
 				else
 					yt = newy, xt = newx;
-				if (!(term.line[yt][xt].mode & ATTR_WRAP))
+				if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
 					break;
 			}

 			if (newx >= tlinelen(newy))
 				break;

-			gp = &term.line[newy][newx];
+			gp = &TLINE(newy)[newx];
 			delim = ISDELIM(gp->u);
 			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
@@ -571,14 +587,14 @@ selsnap(int *x, int *y, int direction)
 		*x = (direction < 0) ? 0 : term.col - 1;
 		if (direction < 0) {
 			for (; *y > 0; *y += direction) {
-				if (!(term.line[*y-1][term.col-1].mode
+				if (!(TLINE(*y-1)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
 			}
 		} else if (direction > 0) {
 			for (; *y < term.row-1; *y += direction) {
-				if (!(term.line[*y][term.col-1].mode
+				if (!(TLINE(*y)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
@@ -609,13 +625,13 @@ getsel(void)
 		}

 		if (sel.type == SEL_RECTANGULAR) {
-			gp = &term.line[y][sel.nb.x];
+			gp = &TLINE(y)[sel.nb.x];
 			lastx = sel.ne.x;
 		} else {
-			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
+			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
 			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
 		}
-		last = &term.line[y][MIN(lastx, linelen-1)];
+		last = &TLINE(y)[MIN(lastx, linelen-1)];
 		while (last >= gp && last->u == ' ')
 			--last;

@@ -956,12 +972,15 @@ int
 tattrset(int attr)
 {
 	int i, j;
+	int y = TLINEOFFSET(0);

 	for (i = 0; i < term.row-1; i++) {
+		Line line = TSCREEN.buffer[y];
 		for (j = 0; j < term.col-1; j++) {
-			if (term.line[i][j].mode & attr)
+			if (line[j].mode & attr)
 				return 1;
 		}
+		y = (y+1) % TSCREEN.size;
 	}

 	return 0;
@@ -983,14 +1002,17 @@ void
 tsetdirtattr(int attr)
 {
 	int i, j;
+	int y = TLINEOFFSET(0);

 	for (i = 0; i < term.row-1; i++) {
+		Line line = TSCREEN.buffer[y];
 		for (j = 0; j < term.col-1; j++) {
-			if (term.line[i][j].mode & attr) {
+			if (line[j].mode & attr) {
 				tsetdirt(i, i);
 				break;
 			}
 		}
+		y = (y+1) % TSCREEN.size;
 	}
 }

@@ -1003,27 +1025,19 @@ tfulldirt(void)
 void
 tcursor(int mode)
 {
-	static TCursor c[2];
-	int alt = IS_SET(MODE_ALTSCREEN);
-
 	if (mode == CURSOR_SAVE) {
-		c[alt] = term.c;
+		TSCREEN.sc = term.c;
 	} else if (mode == CURSOR_LOAD) {
-		term.c = c[alt];
-		tmoveto(c[alt].x, c[alt].y);
+		term.c = TSCREEN.sc;
+		tmoveto(term.c.x, term.c.y);
 	}
 }

 void
 treset(void)
 {
-	uint i;
-
-	term.c = (TCursor){{
-		.mode = ATTR_NULL,
-		.fg = defaultfg,
-		.bg = defaultbg
-	}, .x = 0, .y = 0, .state = CURSOR_DEFAULT};
+	int i, j;
+	Glyph g = (Glyph){ .fg = defaultfg, .bg = defaultbg};

 	memset(term.tabs, 0, term.col * sizeof(*term.tabs));
 	for (i = tabspaces; i < term.col; i += tabspaces)
@@ -1035,17 +1049,37 @@ treset(void)
 	term.charset = 0;

 	for (i = 0; i < 2; i++) {
-		tmoveto(0, 0);
-		tcursor(CURSOR_SAVE);
-		tclearregion(0, 0, term.col-1, term.row-1);
-		tswapscreen();
+		term.screen[i].sc = (TCursor){{
+			.fg = defaultfg,
+			.bg = defaultbg
+		}};
+		term.screen[i].cur = 0;
+		term.screen[i].off = 0;
+		for (j = 0; j < term.row; ++j) {
+			if (term.col != term.linelen)
+				term.screen[i].buffer[j] = xrealloc(term.screen[i].buffer[j], term.col * sizeof(Glyph));
+			clearline(term.screen[i].buffer[j], g, 0, term.col);
+		}
+		for (j = term.row; j < term.screen[i].size; ++j) {
+			free(term.screen[i].buffer[j]);
+			term.screen[i].buffer[j] = NULL;
+		}
 	}
+	tcursor(CURSOR_LOAD);
+	term.linelen = term.col;
+	tfulldirt();
 }

 void
 tnew(int col, int row)
 {
-	term = (Term){ .c = { .attr = { .fg = defaultfg, .bg = defaultbg } } };
+	int i;
+	term = (Term){};
+	term.screen[0].buffer = xmalloc(HISTSIZE * sizeof(Line));
+	term.screen[0].size = HISTSIZE;
+	term.screen[1].buffer = NULL;
+	for (i = 0; i < HISTSIZE; ++i) term.screen[0].buffer[i] = NULL;
+
 	tresize(col, row);
 	treset();
 }
@@ -1053,14 +1087,42 @@ tnew(int col, int row)
 void
 tswapscreen(void)
 {
-	Line *tmp = term.line;
-
-	term.line = term.alt;
-	term.alt = tmp;
 	term.mode ^= MODE_ALTSCREEN;
 	tfulldirt();
 }

+void
+kscrollup(const Arg *a)
+{
+	int n = a->i;
+
+	if (IS_SET(MODE_ALTSCREEN))
+		return;
+
+	if (n < 0) n = (-n) * term.row;
+	if (n > TSCREEN.size - term.row - TSCREEN.off) n = TSCREEN.size - term.row - TSCREEN.off;
+	while (!TLINE(-n)) --n;
+	TSCREEN.off += n;
+	selscroll(0, n);
+	tfulldirt();
+}
+
+void
+kscrolldown(const Arg *a)
+{
+
+	int n = a->i;
+
+	if (IS_SET(MODE_ALTSCREEN))
+		return;
+
+	if (n < 0) n = (-n) * term.row;
+	if (n > TSCREEN.off) n = TSCREEN.off;
+	TSCREEN.off -= n;
+	selscroll(0, -n);
+	tfulldirt();
+}
+
 void
 tscrolldown(int orig, int n)
 {
@@ -1069,15 +1131,29 @@ tscrolldown(int orig, int n)

 	LIMIT(n, 0, term.bot-orig+1);

-	tsetdirt(orig, term.bot-n);
-	tclearregion(0, term.bot-n+1, term.col-1, term.bot);
+	/* Ensure that lines are allocated */
+	for (i = -n; i < 0; i++) {
+		TLINE(i) = ensureline(TLINE(i));
+	}

-	for (i = term.bot; i >= orig+n; i--) {
-		temp = term.line[i];
-		term.line[i] = term.line[i-n];
-		term.line[i-n] = temp;
+	/* Shift non-scrolling areas in ring buffer */
+	for (i = term.bot+1; i < term.row; i++) {
+		temp = TLINE(i);
+		TLINE(i) = TLINE(i-n);
+		TLINE(i-n) = temp;
+	}
+	for (i = 0; i < orig; i++) {
+		temp = TLINE(i);
+		TLINE(i) = TLINE(i-n);
+		TLINE(i-n) = temp;
 	}

+	/* Scroll buffer */
+	TSCREEN.cur = (TSCREEN.cur + TSCREEN.size - n) % TSCREEN.size;
+	/* Clear lines that have entered the view */
+	tclearregion(0, orig, term.linelen-1, orig+n-1);
+	/* Redraw portion of the screen that has scrolled */
+	tsetdirt(orig+n-1, term.bot);
 	selscroll(orig, n);
 }

@@ -1089,15 +1165,29 @@ tscrollup(int orig, int n)

 	LIMIT(n, 0, term.bot-orig+1);

-	tclearregion(0, orig, term.col-1, orig+n-1);
-	tsetdirt(orig+n, term.bot);
+	/* Ensure that lines are allocated */
+	for (i = term.row; i < term.row + n; i++) {
+		TLINE(i) = ensureline(TLINE(i));
+	}

-	for (i = orig; i <= term.bot-n; i++) {
-		temp = term.line[i];
-		term.line[i] = term.line[i+n];
-		term.line[i+n] = temp;
+	/* Shift non-scrolling areas in ring buffer */
+	for (i = orig-1; i >= 0; i--) {
+		temp = TLINE(i);
+		TLINE(i) = TLINE(i+n);
+		TLINE(i+n) = temp;
+	}
+	for (i = term.row-1; i >term.bot; i--) {
+		temp = TLINE(i);
+		TLINE(i) = TLINE(i+n);
+		TLINE(i+n) = temp;
 	}

+	/* Scroll buffer */
+	TSCREEN.cur = (TSCREEN.cur + n) % TSCREEN.size;
+	/* Clear lines that have entered the view */
+	tclearregion(0, term.bot-n+1, term.linelen-1, term.bot);
+	/* Redraw portion of the screen that has scrolled */
+	tsetdirt(orig, term.bot-n+1);
 	selscroll(orig, -n);
 }

@@ -1201,6 +1291,7 @@ tsetchar(Rune u, const Glyph *attr, int x, int y)
 		"⎻", "─", "⎼", "⎽", "├", "┤", "┴", "┬", /* p - w */
 		"│", "≤", "≥", "π", "≠", "£", "·", /* x - ~ */
 	};
+	Line line = TLINE(y);

 	/*
 	 * The table is proudly stolen from rxvt.
@@ -1209,25 +1300,25 @@ tsetchar(Rune u, const Glyph *attr, int x, int y)
 	   BETWEEN(u, 0x41, 0x7e) && vt100_0[u - 0x41])
 		utf8decode(vt100_0[u - 0x41], &u, UTF_SIZ);

-	if (term.line[y][x].mode & ATTR_WIDE) {
+	if (line[x].mode & ATTR_WIDE) {
 		if (x+1 < term.col) {
-			term.line[y][x+1].u = ' ';
-			term.line[y][x+1].mode &= ~ATTR_WDUMMY;
+			line[x+1].u = ' ';
+			line[x+1].mode &= ~ATTR_WDUMMY;
 		}
-	} else if (term.line[y][x].mode & ATTR_WDUMMY) {
-		term.line[y][x-1].u = ' ';
-		term.line[y][x-1].mode &= ~ATTR_WIDE;
+	} else if (line[x].mode & ATTR_WDUMMY) {
+		line[x-1].u = ' ';
+		line[x-1].mode &= ~ATTR_WIDE;
 	}

 	term.dirty[y] = 1;
-	term.line[y][x] = *attr;
-	term.line[y][x].u = u;
+	line[x] = *attr;
+	line[x].u = u;
 }

 void
 tclearregion(int x1, int y1, int x2, int y2)
 {
-	int x, y, temp;
+	int x, y, L, S, temp;
 	Glyph *gp;

 	if (x1 > x2)
@@ -1235,15 +1326,16 @@ tclearregion(int x1, int y1, int x2, int y2)
 	if (y1 > y2)
 		temp = y1, y1 = y2, y2 = temp;

-	LIMIT(x1, 0, term.col-1);
-	LIMIT(x2, 0, term.col-1);
+	LIMIT(x1, 0, term.linelen-1);
+	LIMIT(x2, 0, term.linelen-1);
 	LIMIT(y1, 0, term.row-1);
 	LIMIT(y2, 0, term.row-1);

+	L = TLINEOFFSET(y1);
 	for (y = y1; y <= y2; y++) {
 		term.dirty[y] = 1;
 		for (x = x1; x <= x2; x++) {
-			gp = &term.line[y][x];
+			gp = &TSCREEN.buffer[L][x];
 			if (selected(x, y))
 				selclear();
 			gp->fg = term.c.attr.fg;
@@ -1251,6 +1343,7 @@ tclearregion(int x1, int y1, int x2, int y2)
 			gp->mode = 0;
 			gp->u = ' ';
 		}
+		L = (L + 1) % TSCREEN.size;
 	}
 }

@@ -1265,7 +1358,7 @@ tdeletechar(int n)
 	dst = term.c.x;
 	src = term.c.x + n;
 	size = term.col - src;
-	line = term.line[term.c.y];
+	line = TLINE(term.c.y);

 	memmove(&line[dst], &line[src], size * sizeof(Glyph));
 	tclearregion(term.col-n, term.c.y, term.col-1, term.c.y);
@@ -1282,7 +1375,7 @@ tinsertblank(int n)
 	dst = term.c.x + n;
 	src = term.c.x;
 	size = term.col - dst;
-	line = term.line[term.c.y];
+	line = TLINE(term.c.y);

 	memmove(&line[dst], &line[src], size * sizeof(Glyph));
 	tclearregion(src, term.c.y, dst - 1, term.c.y);
@@ -2103,7 +2196,7 @@ tdumpline(int n)
 	char buf[UTF_SIZ];
 	const Glyph *bp, *end;

-	bp = &term.line[n][0];
+	bp = &TLINE(n)[0];
 	end = &bp[MIN(tlinelen(n), term.col) - 1];
 	if (bp != end || bp->u != ' ') {
 		for ( ; bp <= end; ++bp)
@@ -2486,11 +2579,11 @@ check_control_code:
 	if (selected(term.c.x, term.c.y))
 		selclear();

-	gp = &term.line[term.c.y][term.c.x];
+	gp = &TLINE(term.c.y)[term.c.x];
 	if (IS_SET(MODE_WRAP) && (term.c.state & CURSOR_WRAPNEXT)) {
 		gp->mode |= ATTR_WRAP;
 		tnewline(1);
-		gp = &term.line[term.c.y][term.c.x];
+		gp = &TLINE(term.c.y)[term.c.x];
 	}

 	if (IS_SET(MODE_INSERT) && term.c.x+width < term.col)
@@ -2498,7 +2591,7 @@ check_control_code:

 	if (term.c.x+width > term.col) {
 		tnewline(1);
-		gp = &term.line[term.c.y][term.c.x];
+		gp = &TLINE(term.c.y)[term.c.x];
 	}

 	tsetchar(u, &term.c.attr, term.c.x, term.c.y);
@@ -2529,6 +2622,11 @@ twrite(const char *buf, int buflen, int show_ctrl)
 	Rune u;
 	int n;

+	if (TSCREEN.off) {
+		TSCREEN.off = 0;
+		tfulldirt();
+	}
+
 	for (n = 0; n < buflen; n += charsize) {
 		if (IS_SET(MODE_UTF8)) {
 			/* process a complete utf8 char */
@@ -2555,56 +2653,85 @@ twrite(const char *buf, int buflen, int show_ctrl)
 }

 void
-tresize(int col, int row)
+clearline(Line line, Glyph g, int x, int xend)
 {
 	int i;
+	g.mode = 0;
+	g.u = ' ';
+	for (i = x; i < xend; ++i) {
+		line[i] = g;
+	}
+}
+
+Line
+ensureline(Line line)
+{
+	if (!line) {
+		line = xmalloc(term.linelen * sizeof(Glyph));
+	}
+	return line;
+}
+
+void
+tresize(int col, int row)
+{
+	int i, j;
 	int minrow = MIN(row, term.row);
 	int mincol = MIN(col, term.col);
+	int linelen = MAX(col, term.linelen);
 	int *bp;
-	TCursor c;

-	if (col < 1 || row < 1) {
+	if (col < 1 || row < 1 || row > HISTSIZE) {
 		fprintf(stderr,
 		        "tresize: error resizing to %dx%d\n", col, row);
 		return;
 	}

-	/*
-	 * slide screen to keep cursor where we expect it -
-	 * tscrollup would work here, but we can optimize to
-	 * memmove because we're freeing the earlier lines
-	 */
-	for (i = 0; i <= term.c.y - row; i++) {
-		free(term.line[i]);
-		free(term.alt[i]);
+	/* Shift buffer to keep the cursor where we expect it */
+	if (row <= term.c.y) {
+		term.screen[0].cur = (term.screen[0].cur - row + term.c.y + 1) % term.screen[0].size;
+	}
+
+	/* Resize and clear line buffers as needed */
+	if (linelen > term.linelen) {
+		for (i = 0; i < term.screen[0].size; ++i) {
+			if (term.screen[0].buffer[i]) {
+				term.screen[0].buffer[i] = xrealloc(term.screen[0].buffer[i], linelen * sizeof(Glyph));
+				clearline(term.screen[0].buffer[i], term.c.attr, term.linelen, linelen);
+			}
+		}
+		for (i = 0; i < minrow; ++i) {
+			term.screen[1].buffer[i] = xrealloc(term.screen[1].buffer[i], linelen * sizeof(Glyph));
+			clearline(term.screen[1].buffer[i], term.c.attr, term.linelen, linelen);
+		}
 	}
-	/* ensure that both src and dst are not NULL */
-	if (i > 0) {
-		memmove(term.line, term.line + i, row * sizeof(Line));
-		memmove(term.alt, term.alt + i, row * sizeof(Line));
+	/* Allocate all visible lines for regular line buffer */
+	for (j = term.screen[0].cur, i = 0; i < row; ++i, j = (j + 1) % term.screen[0].size)
+	{
+		if (!term.screen[0].buffer[j]) {
+			term.screen[0].buffer[j] = xmalloc(linelen * sizeof(Glyph));
+		}
+		if (i >= term.row) {
+			clearline(term.screen[0].buffer[j], term.c.attr, 0, linelen);
+		}
 	}
-	for (i += row; i < term.row; i++) {
-		free(term.line[i]);
-		free(term.alt[i]);
+	/* Resize alt screen */
+	term.screen[1].cur = 0;
+	term.screen[1].size = row;
+	for (i = row; i < term.row; ++i) {
+		free(term.screen[1].buffer[i]);
+	}
+	term.screen[1].buffer = xrealloc(term.screen[1].buffer, row * sizeof(Line));
+	for (i = term.row; i < row; ++i) {
+		term.screen[1].buffer[i] = xmalloc(linelen * sizeof(Glyph));
+		clearline(term.screen[1].buffer[i], term.c.attr, 0, linelen);
 	}

 	/* resize to new height */
-	term.line = xrealloc(term.line, row * sizeof(Line));
-	term.alt  = xrealloc(term.alt,  row * sizeof(Line));
 	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
 	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));

-	/* resize each row to new width, zero-pad if needed */
-	for (i = 0; i < minrow; i++) {
-		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
-		term.alt[i]  = xrealloc(term.alt[i],  col * sizeof(Glyph));
-	}
-
-	/* allocate any new rows */
-	for (/* i = minrow */; i < row; i++) {
-		term.line[i] = xmalloc(col * sizeof(Glyph));
-		term.alt[i] = xmalloc(col * sizeof(Glyph));
-	}
+	/* fix tabstops */
 	if (col > term.col) {
 		bp = term.tabs + term.col;

@@ -2614,26 +2741,16 @@ tresize(int col, int row)
 		for (bp += tabspaces; bp < term.tabs + col; bp += tabspaces)
 			*bp = 1;
 	}
+
 	/* update terminal size */
 	term.col = col;
 	term.row = row;
+	term.linelen = linelen;
 	/* reset scrolling region */
 	tsetscroll(0, row-1);
 	/* make use of the LIMIT in tmoveto */
 	tmoveto(term.c.x, term.c.y);
-	/* Clearing both screens (it makes dirty all lines) */
-	c = term.c;
-	for (i = 0; i < 2; i++) {
-		if (mincol < col && 0 < minrow) {
-			tclearregion(mincol, 0, col - 1, minrow - 1);
-		}
-		if (0 < col && minrow < row) {
-			tclearregion(0, minrow, col - 1, row - 1);
-		}
-		tswapscreen();
-		tcursor(CURSOR_LOAD);
-	}
-	term.c = c;
+	tfulldirt();
 }

 void
@@ -2645,14 +2762,15 @@ resettitle(void)
 void
 drawregion(int x1, int y1, int x2, int y2)
 {
-	int y;
+	int y, L;

+	L = TLINEOFFSET(y1);
 	for (y = y1; y < y2; y++) {
-		if (!term.dirty[y])
-			continue;
-
-		term.dirty[y] = 0;
-		xdrawline(term.line[y], x1, y, x2);
+		if (term.dirty[y]) {
+			term.dirty[y] = 0;
+			xdrawline(TSCREEN.buffer[L], x1, y, x2);
+		}
+		L = (L + 1) % TSCREEN.size;
 	}
 }

@@ -2667,15 +2785,16 @@ draw(void)
 	/* adjust cursor position */
 	LIMIT(term.ocx, 0, term.col-1);
 	LIMIT(term.ocy, 0, term.row-1);
-	if (term.line[term.ocy][term.ocx].mode & ATTR_WDUMMY)
+	if (TLINE(term.ocy)[term.ocx].mode & ATTR_WDUMMY)
 		term.ocx--;
-	if (term.line[term.c.y][cx].mode & ATTR_WDUMMY)
+	if (TLINE(term.c.y)[cx].mode & ATTR_WDUMMY)
 		cx--;

 	drawregion(0, 0, term.col, term.row);
-	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
-			term.ocx, term.ocy, term.line[term.ocy][term.ocx],
-			term.line[term.ocy], term.col);
+	if (TSCREEN.off == 0)
+		xdrawcursor(cx, term.c.y, TLINE(term.c.y)[cx],
+				term.ocx, term.ocy, TLINE(term.ocy)[term.ocx],
+				TLINE(term.ocy), term.col);
 	term.ocx = cx;
 	term.ocy = term.c.y;
 	xfinishdraw();
diff --git a/st.h b/st.h
index 7a9cb1e..6ee3788 100644
--- a/st.h
+++ b/st.h
@@ -20,6 +20,7 @@

 #define TRUECOLOR(r,g,b)	(1 << 24 | (r) << 16 | (g) << 8 | (b))
 #define IS_TRUECOL(x)		(1 << 24 & (x))
+#define HISTSIZE            2000

 enum glyph_attribute {
 	ATTR_NULL       = 0,
diff --git a/x.c b/x.c
index 29d22e5..8917c72 100644
--- a/x.c
+++ b/x.c
@@ -61,6 +61,8 @@ static void zoom(const Arg *);
 static void zoomabs(const Arg *);
 static void zoomreset(const Arg *);
 static void ttysend(const Arg *);
+void kscrollup(const Arg *);
+void kscrolldown(const Arg *);

 /* config.h for applying patches and the configuration. */
 #include "config.h"

commit 75d2d53a2cd42d3cbdeea34a86a54e3b8643f9a8
Author: Viktor Kronvall <viktor.kronvall@gmail.com>
Date:   Sun May 29 05:19:25 2022 +0900

    mouse scrolling

diff --git a/config.def.h b/config.def.h
index eb1e9ee..109c3c9 100644
--- a/config.def.h
+++ b/config.def.h
@@ -167,7 +167,9 @@ static uint forcemousemod = ShiftMask;
  * Beware that overloading Button1 will disable the selection.
  */
 static MouseShortcut mshortcuts[] = {
-    /* mask                 button   function        argument       release */
+    /* mask     button   function    argument  release altscrn */
+    {XK_ANY_MOD, Button4, kscrollup, {.i = 3}, 0, -1},
+    {XK_ANY_MOD, Button5, kscrolldown, {.i = 3}, 0, -1},
     {XK_ANY_MOD, Button2, selpaste, {.i = 0}, 1},
     {ShiftMask, Button4, ttysend, {.s = "\033[5;2~"}},
     {XK_ANY_MOD, Button4, ttysend, {.s = "\031"}},
diff --git a/st.c b/st.c
index dcde6b5..de66605 100644
--- a/st.c
+++ b/st.c
@@ -1084,6 +1084,11 @@ tnew(int col, int row)
 	treset();
 }

+int tisaltscr(void)
+{
+	return IS_SET(MODE_ALTSCREEN);
+}
+
 void
 tswapscreen(void)
 {
diff --git a/x.c b/x.c
index 8917c72..aa995b9 100644
--- a/x.c
+++ b/x.c
@@ -36,6 +36,7 @@ typedef struct {
 	void (*func)(const Arg *);
 	const Arg arg;
 	uint  release;
+	int   altscrn; /* 0: don't care, -1: not alt screen, 1: alt screen */
 } MouseShortcut;

 typedef struct {
@@ -452,6 +453,7 @@ mouseaction(XEvent *e, uint release)
 	for (ms = mshortcuts; ms < mshortcuts + LEN(mshortcuts); ms++) {
 		if (ms->release == release &&
 		    ms->button == e->xbutton.button &&
+		    (!ms->altscrn || (ms->altscrn == (tisaltscr() ? 1 : -1))) &&
 		    (match(ms->mod, state) ||  /* exact or forced */
 		     match(ms->mod, state & ~forcemousemod))) {
 			ms->func(&(ms->arg));
